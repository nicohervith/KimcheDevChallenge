{"version":3,"sources":["components/countries/HookCountry.js","components/CardContainer.js","components/SearchCountry.js","components/CountryContainer.js","App.js","serviceWorker.js","index.js"],"names":["ALL_COUNTRIES","gql","CardCountry","props","country","length","className","map","key","code","continent","name","languages","lang","emoji","native","len","capital","SearchCountry","countries","useState","countrySearch","setCountrySearch","countryInput","setCountryInput","setContinent","language","setLanguage","useEffect","filterCountry","searchInput","result","filter","toString","toLowerCase","startsWith","includes","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","autoFocus","onClick","CardContainer","CountryContainer","useQuery","data","loading","client","ApolloClient","uri","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.331b866b.chunk.js","sourcesContent":["import { useQuery } from \"@apollo/react-hooks\";\r\nimport { gql } from \"apollo-boost\";\r\n\r\nexport const ALL_COUNTRIES = gql`\r\n  query {\r\n    countries {\r\n      name\r\n      code\r\n      native\r\n      capital\r\n      continent {\r\n        name\r\n      }\r\n      languages {\r\n        code\r\n        name\r\n        native\r\n      }\r\n      emoji\r\n      emojiU\r\n      states {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useCountries = () => {\r\n  const result = useQuery(ALL_COUNTRIES);\r\n  return result;\r\n};\r\n","import React from \"react\";\r\n\r\nconst CardCountry = (props) => {\r\n  return (\r\n    <div>\r\n      {props.country.length === 0 ? (\r\n        <div className=\"container-text-card\">\r\n          <h4 className=\"text-container\">\r\n            Search something...\r\n            <br />\r\n            <br />\r\n            <br />\r\n          </h4>\r\n        </div>\r\n      ) : (\r\n        <div className=\"card-container\">\r\n          {props.country.map((country) => (\r\n            <div className=\"\" key={country.code}>\r\n              <div className=\"card-container-box\">\r\n                {props.continent === true ? (\r\n                  <h2>\r\n                    {country.continent.name}\r\n                    <hr />\r\n                  </h2>\r\n                ) : (\r\n                  <h2>\r\n                    {country.languages.map((lang) => (\r\n                      <p key={lang.name}>{lang.name}</p>\r\n                    ))}\r\n                  </h2>\r\n                )}\r\n                <div>\r\n                  <h3>\r\n                    {country.emoji} {country.name}\r\n                  </h3>\r\n                  <h4>{country.native}</h4>\r\n                  {props.continent === true ? (\r\n                    <ul>\r\n                      <span>Languages:</span>\r\n                      {country.languages.map((len) => (\r\n                        <li key={len.name}>{len.name}</li>\r\n                      ))}\r\n                    </ul>\r\n                  ) : (\r\n                    <p>\r\n                      Continent:\r\n                      <span>{country.continent.name}</span>\r\n                    </p>\r\n                  )}\r\n                  <p>\r\n                    Capital: <span>{country.capital}</span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardCountry;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CardContainer from \"./CardContainer\";\r\n\r\n\r\nconst SearchCountry = ({ countries }) => {\r\n  \r\n  const [countrySearch, setCountrySearch] = useState([]);\r\n  const [countryInput, setCountryInput] = useState([]);\r\n  const [continent, setContinent] = useState(null);\r\n  const [language, setLanguage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (continent === null) {\r\n      setContinent(true);\r\n    }\r\n  }, [  ]);\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setCountryInput(e.target.value);\r\n    filterCountry(e.target.value);\r\n  };\r\n\r\n  const filterCountry = (searchInput) => {\r\n    let result = countries.filter((country) => {\r\n      if (\r\n        country.name\r\n          .toString()\r\n          .toLowerCase()\r\n          .startsWith(searchInput.toLowerCase()) &&\r\n        country.name\r\n          .toString()\r\n          .toLowerCase()\r\n          .includes(searchInput.toLowerCase())\r\n      ) {\r\n        return country;\r\n      }\r\n    });\r\n    setCountrySearch(result);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const showContinent = () => {\r\n    setContinent(true);\r\n    setLanguage(null);\r\n  };\r\n\r\n  const showLanguage = () => {\r\n    setLanguage(true);\r\n    setContinent(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container-input\" onSubmit={handleSubmit}>\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"input-search\"\r\n            placeholder=\"Search\"\r\n            value={countryInput}\r\n            onChange={handleChange}\r\n            autoFocus\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <div className=\"container-text\">\r\n          <h2 className=\"text-container\">Group By: </h2>\r\n          <div className=\"container-buttons\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"container-button\"\r\n              onClick={showContinent}\r\n            >\r\n              Continent\r\n            </button>\r\n          </div>\r\n          <div className=\"container-buttons\">\r\n            <button\r\n              className=\"container-button\"\r\n              type=\"button\"\r\n              onClick={showLanguage}\r\n            >\r\n              Language\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container-card\">\r\n        <CardContainer\r\n          country={countrySearch}\r\n          continent={continent}\r\n          language={language}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchCountry;\r\n","import React from \"react\";\r\nimport { useCountries } from \"./countries/HookCountry\";\r\nimport SearchCountry from \"./SearchCountry\"\r\n\r\n\r\n const CountryContainer = () => {\r\n   const { data, loading } = useCountries();\r\n   return (\r\n     <div className=\"container-main\">\r\n       <br/>\r\n       <h1 className=\"container-title\">Country Search</h1>\r\n       <div className=\"container-text-title\">\r\n           <h2 className=\"text-container\">Search by characters or words</h2>\r\n\r\n       </div>\r\n       {loading ? (\r\n         <p>Loading...</p>\r\n       ) : (\r\n         <SearchCountry countries={data?.countries} />\r\n       )}\r\n     </div>\r\n   );\r\n };\r\n\r\nexport default CountryContainer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nimport CountryContainer from \"./components/CountryContainer\";\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com/\",\n});\n\nconst App = () => (\n  <div id=\"mainPage\">\n    <br />\n    <ApolloProvider client={client}>\n      <CountryContainer />\n    </ApolloProvider>\n  </div>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}